# -*- coding: utf-8 -*-
"""streamlit.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R3jze1tagzgPCGiz0SEHkdP5odx_7r8F
"""

!pip install streamlit
!pip install pyngrok

from google.colab import drive
drive.mount('/content/drive')
!cp -r "drive/My Drive/AWS_Streamlit/flydubai_logo" "flydubai_logo"

# Commented out IPython magic to ensure Python compatibility.
# %%writefile ui.py
# import html
# import streamlit as st
# import streamlit.components.v1 as cmpnts
# from PIL import Image
# import pandas as pd
# 
# if __name__ == '__main__':
#     st.set_page_config(layout="wide")
#     col1, col3 = st.columns(2)
#     with col3:
#         st.write('')
#         img=Image.open('/content/flydubai_logo')
#         st.image(img,width=300)
#     with col1:
#         #use_column_width='always',
#         st.image('https://raw.githubusercontent.com/tarun243/Streamlit-commonToAllIndustry/master/Web_app/Logo_final.png',width=300)
#         # st.image('https://drive.google.com/file/d/1QdXHaDc9iKrgV9SkWBhryxyWSpAxQmKs/view?usp=sharing',width=500)
# 
#     st.markdown("<h1 style='text-align: center; color: black; font-size:20px;'>AIR-TRAFFIC DEMAND FORECAST</h1>", unsafe_allow_html=True)
# 
#     st.markdown("<h1 style='text-align: center; color: blue; font-size:20px;'>Powered by AWS SageMaker and Streamlit</h1>", unsafe_allow_html=True)
# 
#     st.markdown("""<style>a {
#         text-decoration: none;
#     }
#     </style>""", unsafe_allow_html=True)
#     m = st.markdown("""
#     <style>
#     div.stButton > button:first-child {border: 1px solid; width: 55%;
#         background-color: rgb(47 236 106) ;
#     }
#     </style>""", unsafe_allow_html=True)
# 
#     #for horizontal line
#     st.markdown("""
#     <hr style="width:100%;height:3px;background-color:gray;border-width:10">
#     """, unsafe_allow_html=True)
# 
#     col2, col3,_ = st.columns([3,3,1])
#     with col2:
#         st.write('')
#         st.write('')
#         st.subheader("Target field")
#         st.write('')
#         st.write('')
#         st.subheader("Forecasting period")
#         st.write('')
#         st.write('')
#         st.subheader("Model selection")
#         st.write('')
#         st.write('')
#         st.subheader("Upload file")
#         st.write('')
#         st.write('')
#         # st.write('')
#         # st.write('')
#         # st.subheader("Hyper parameter tunning")
#     uploaded_file = None
#     cols = ['Please upload data to avail fields']
#     with col3:
#         vAR_target = st.selectbox('',('Select the field', 'Booking', 'Revenue'),index=0)
#         vAR_period = st.selectbox('',('Select the forecast period', 'Rolling Forecast(6 months)', 'Annual Forecast(12 months)'),index=0)
#         vAR_model = st.selectbox('',('Select the model', 'ARIMA', 'DeepAR','Keras','Prophet'),index=0)
#         vAR_method = st.selectbox('',('Select the method', 'Local'),index=0)
#         if vAR_method == 'Local':
#           uploaded_file = st.file_uploader("Choose a file")
#     
#     _, col2,_ = st.columns([1,7,2])
#     with col2:
#       if uploaded_file is not None:
#             df = pd.read_csv(uploaded_file)
#             cols = df.columns
#             with st.expander("DATA PREVIEW"):
#               st.write(df)
#     
#     # For page breaks, The columns are reassigned
#     col2, col3,_ = st.columns([3,3,1])
#     with col3:
#             with col2:
#                   # st.write('')
#                   st.write('')
#                   st.write('')             
#                   st.subheader("Feature selection")
#             vAR_features = st.multiselect('',cols)
#             # print(vAR_features)
#             # st.write(vAR_features)
#             with st.expander("List selected features"):
#               for i in range(0,len(vAR_features)):
#                 st.write('Feature',i+1,':',vAR_features[i])
# 
#     col2, col3,_ = st.columns([3,3,1])
#     with col3:
#         if vAR_model != 'Select the model':
#           with col2:
#             st.write('')
#             st.write('')
#             st.subheader("Hyper parameter tunning")
#         st.write('')
#         st.write('')
#         if vAR_model == 'ARIMA':
#           st.write('For Model ARIMA')
#           vAR_data = st.text_input('Difference')
#           vAR_data = st.text_input('Moving_verage')
#           vAR_data = st.text_input('Lag_bservations')
#         if vAR_model == 'Keras':
#           st.write('For Model Keras')
#           vAR_data = st.text_input('Epochs')
#           vAR_data = st.text_input('Learning_rate')
#           vAR_data = st.text_input('Dimension')
#         if vAR_model == 'DeepAR':
#           st.write('For Model DeepAR')
#           vAR_data = st.text_input('Context_length')
#           vAR_data = st.text_input('Epochs')
#           vAR_data = st.text_input('Learning_rate')
#           vAR_data = st.text_input('Epochs')
#           vAR_data = st.text_input('Dropout_rate')
#         if vAR_model == 'Prophet':
#           st.write('For Model Prophet')
#           vAR_data = st.text_input('Changepoints')
#           vAR_data = st.text_input('Changepoint_range')
#           vAR_data = st.text_input('Changepoint_prior_scale')
#           vAR_data = st.text_input('n_changepoints')
# 
#         st.button("TRAIN MODEL")
# 
# 
#     #4c85e4
#     st.markdown("""<style>.css-1d391kg, .e1fqkh3o1{
#         background-color:rgb(82 142 237);
#         width: 19rem;
#     }
#     </style>""", unsafe_allow_html=True)
# 
#     # st.markdown("""<style>div.stButton > button:first-child
#     # {
#     #     # 47 236 106
#     #     background-color:rgb(52 231 128);  
#     #     top: 30px; 
#     #     border: 1px solid; 
#     #     padding: 10px;
#     #     border-radius:2px; 
#     #     width: 100%; }
#     # </style>""", unsafe_allow_html=True)
# 
#     st.markdown("""<style>.button  
#     {
#         background-color:rgb(52 231 128);  
#         top: 40px; 
#         border: 0px solid; 
#         padding: 10px;
#         border-radius:3px;
#         width: 100%; }
#     </style>""", unsafe_allow_html=True)
# 
# 
#     #for clear/reset button
#     st.markdown("""<style>p, ol, ul, dl {
#         margin: 10px 80px 1rem;
#         font-size: 1rem;
#         font-weight: 400;
#     }
#     </style>""", unsafe_allow_html=True)
#     side1,_ = st.sidebar.columns(2)
#     with side1:
#       st.sidebar.write('Menu')
#     choice1 =  st.sidebar.selectbox(" ",('Home','Option 1','option 2', 'option 3'))
#     choice2 =  st.sidebar.selectbox(" ",('Libraries used','Option 1','option 2', 'option 3'))
#     choice3 =  st.sidebar.selectbox(" ",('Models implemented','Option 1','option 2', 'option 3'))
#     menu = ["AWS services used","Pipeline","Data Wrangler","Experiment and trial","Inference Job","Compilation Job","Compilation Job","End Points"]
#     choice = st.sidebar.selectbox(" ",menu)
#     #for clear/reset button
#     st.sidebar.write('')
#     st.sidebar.write('')
#     # button = st.sidebar.button("clear")
#     href = f'<a style="color:black;" href="" class="button">Clear/Reset</a>'
#     st.sidebar.markdown(href, unsafe_allow_html=True)
#

from pyngrok import ngrok
ngrok.set_auth_token("22jOQJrD48XEtAdlkRfAbSYC90y_5knM6E9aTTGunjTYHjyrB")
public_url = ngrok.connect(port='80')
public_url

!streamlit run --server.port=80 ui.py >/dev/null

!killall ngrok

